WEEK0: SETUP AND TOOLS
Overview:
This repository provides a step-by-step guide for setting up the environment, installing necessary tools, and verifying installations for the RISC-V SoC Tapeout Program. It uses open-source tools and includes scripts, snapshots, and notes for each step.

Table of Contents

System Requirements

Installed Tools

Installation Scripts

Snapshots

System Requirements

OS: Ubuntu 20.04+ (on VirtualBox or native VM)

RAM: 6GB

CPU: 4 vCPU

HDD: 50GB

Windows Users: Use Ubuntu VM or WSL

Installed Tools
1. Yosys – RTL Synthesis Tool

Purpose: Converts RTL code into gate-level representations.

Installation:

sudo apt-get update
git clone https://github.com/YosysHQ/yosys.git
cd yosys
sudo apt install make build-essential clang bison flex \
libreadline-dev gawk tcl-dev libffi-dev git \
graphviz xdot pkg-config python3 libboost-system-dev \
libboost-python-dev libboost-filesystem-dev zlib1g-dev
make config-gcc
make
sudo make install


Verification:


✅ Yosys successfully installed

2. Icarus Verilog (Iverilog) – Verilog Simulator

Purpose: Compiles and simulates Verilog designs for functional verification.

Installation:

sudo apt-get update
sudo apt-get install iverilog


Verification:


✅ Iverilog successfully installed

3. GTKWave – Waveform Viewer

Purpose: Visualizes simulation waveforms.

Installation:

sudo apt-get update
sudo apt install gtkwave


Verification:


✅ GTKWave successfully installed

4. Ngspice – Circuit Simulator

Purpose: Performs analog and mixed-signal circuit simulations.

Installation:

sudo apt update
sudo apt install ngspice


Verification:


✅ Ngspice successfully installed

5. Magic VLSI – Layout Tool

Purpose: Open-source VLSI layout tool for IC design, DRC, and visualization.

Installation:

sudo apt-get install m4 tcsh csh libx11-dev tcl-dev tk-dev \
libcairo2-dev mesa-common-dev libglu1-mesa-dev libncurses-dev
git clone https://github.com/RTimothyEdwards/magic
cd magic
./configure
make
sudo make install


Verification:


✅ Magic VLSI successfully installed

6. OpenLane – ASIC Flow

Purpose: Fully automated open-source digital ASIC design flow from RTL → GDSII.

Installation:

sudo apt-get update
sudo apt-get upgrade
sudo apt install -y build-essential python3 python3-venv python3-pip make git
sudo apt install apt-transport-https ca-certificates curl software-properties-common

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

sudo apt update
sudo apt install docker-ce docker-ce-cli containerd.io
sudo docker run hello-world
sudo groupadd docker
sudo usermod -aG docker $USER
sudo reboot
# After reboot
docker run hello-world


Install OpenLane tools and PDKs:

cd $HOME
git clone https://github.com/The-OpenROAD-Project/OpenLane
cd OpenLane
make
make test


Verification:


✅ OpenLane successfully installed

7. Check Dependencies
git --version
docker --version
python3 --version
python3 -m pip --version
make --version
python3 -m venv -h


Verification:


✅ All dependencies successfully checked
